// Code generated by Kitex v0.3.2. DO NOT EDIT.

package login

import (
	"context"
	"demo/kitex_gen/user"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return loginServiceInfo
}

var loginServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Login"
	handlerType := (*user.Login)(nil)
	methods := map[string]kitex.MethodInfo{
		"CheckUser": kitex.NewMethodInfo(checkUserHandler, newLoginCheckUserArgs, newLoginCheckUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.LoginCheckUserArgs)
	realResult := result.(*user.LoginCheckUserResult)
	success, err := handler.(user.Login).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLoginCheckUserArgs() interface{} {
	return user.NewLoginCheckUserArgs()
}

func newLoginCheckUserResult() interface{} {
	return user.NewLoginCheckUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CheckUser(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.LoginCheckUserArgs
	_args.Req = req
	var _result user.LoginCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
